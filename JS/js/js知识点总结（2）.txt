1.this指向的问题
function aa(){
	   	console.log(this);
	   }
	   aa();//window 
	   var b={
			aa:function(){
				console.log(this);
			}
		};
		b.aa();//b {}
		var d = document.getElementById('btn');
		d.onclick = function(){
			console.log(this);//<button></button>
		}
		setTimeout(function(){
			console.log(this);
		},2000);//window,因为定时器是window下的方法
		找离它最近的函数
		d.onclick = function(){
			setTimeout(function(){
			console.log(this);
		}.bind(this),2000);
		}//这回的输出结果由window->button

let us have a summary:
this总是指向函数的直接调用者（而非间接调用者）；
如果有new关键字，this指向new出来的那个对象；
在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；
2.requirejs原理及AMD CMD
require.js遵循的是AMD 规范（async module defination）提前执行 依赖前置
sea.js遵循的是CMD规范（common module defination）延缓执行 依赖就近
它们的问题都是解决模块化开发和加载依赖
requirejs :
define(['a','b'],function(){});
seajs:
define(function(){
   ....
   require('a');
..... 
});
requirejs的原理：
<script src="require.js" data-main="index"></script>
其中的index是入口文件
采用正则表达式解析入口文件，通过入口文件便可以知道它依赖哪些模块，然后匹配文件名
然后动态创建js，然后再次在文件中判断，一层一层的，这样就很好的实现了模块开发。

3.跨域的问题
js是不允许跨域。
是浏览器的同源策略，只允许在同一个源内访问，可以我们有时还是有这个需求的，how to
do?
1.不同域
www.a.com:80  www.a.com:8080
http://www.a.com 安全的 https://www.a.com 非安全的
www.a.com 主域 news.a.com 子域
2.同域
www.a.com/a/     www.a.com/b

实现跨域的手段：
1.1 jsonp
1.2 iframe
1.3 服务器代理
1.4 HTML5 XMLHttpRequest2

1.1 <script src='www.a.com/jquery.js'></script>这种方式称为cdn加速(content distribute network)

在这个域下:www.a.com
<script>
  function aa(data){
    var o = document.getelementbyid('div1');
    o.innerHTML = data;
</script>
</script src='http://www.b.com/test.php?name=haha'></script>

在www.b.com中:
test.php:
<?php $name = $_get['name'];
 echo 'aa({"name":"'.$name.'","age":9})';
?>
为了防止有多个域下不同的回调函数都能访问到，采用callback
</script src='http://www.b.com/test.php?name=haha&callback=aa'></script>
 echo '$callback.({"name":"'.$name.'","age":9});
这样就实现了从不同域相互传数据的情况，这种方式叫做jsonp(json+padding) 将json对象
填充到了函数中，aa()称为回调函数，等着请求发送处理完成后才调用的。而且jsonp不允许
post访问。（也可以动态创建js，设置src，实现跨域）

1.2 iframe
iframe元素会创建包含另外一个文档的内联框架(即行内框架)。即可以将iframe加载的页面
包含到它被加载的页面中，合为一体
www.a.com/index3.html:
<body>
   a.com
   <iframe src='http://www.b.com/index.html' frameborder='0'></iframe>
</body>
www.b.com/index.html
<body>
   b.com
</body>
在iframe中也可以发送数据，
 <iframe src='http://www.b.com/test.php?name=haha' frameborder='0'></iframe>
与jsonp不同的是，jsonp加载的是js文件，而iframe加载的是html文件
子页面如果想访问父页面的数据，采用top.的形式，但这时候会产生一个安全性问题，
如何解决嘞：
采用反向调用，在www.b.com中，再次采用iframe,以php文件形式，将数据回传，但是
还是比较麻烦的。（）通过借助第三个文件，但也都是两个域中的文件）

1.4
在www.b.com中写上这样一句话即可（H5中的特有的，低版本浏览器不允许）
header('access-control-allow-origin:http://www.a.com');


